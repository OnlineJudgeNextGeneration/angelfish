#![feature(test)]
extern crate test;
extern crate libbedrock;
extern crate bytes;

use bytes::Bytes;
use libbedrock::packet::*;
use test::*;

#[bench]
fn encode_unconnected_ping(b: &mut Bencher) {
    let a = Pk::UnconnectedPing {
        ping_time: 0xea5eca7102666666u64,
    };
    b.iter(|| {
        Bytes::from(a.clone());
    });
}

#[bench]
fn decode_unconnected_ping(b: &mut Bencher) {
    b.iter(|| {
        Bytes::from(vec![
            0x01, 0xea, 0x5e, 0xca, 0x71, 0x02, 0x66, 0x66, 0x66, 0x00, 0xff, 0xff, 0x00, 0xfe, 0xfe,
            0xfe, 0xfe, 0xfd, 0xfd, 0xfd, 0xfd, 0x12, 0x34, 0x56, 0x78,
        ]).try_into_pk().unwrap();
    })
}

#[bench]
fn encode_unconnected_pong(b: &mut Bencher) {
    let a = Pk::UnconnectedPong {
        ping_time: 0xea5eca7102666666u64,
        server_id: 12345678901234567890u64,
        msg_of_today: String::from("EaseCation Server"),
        online_count: 17689,
        max_count: 20000,
        bedrock_net_ver: 140,
        bedrock_game_ver: String::from("1.2.9"),
    };
    b.iter(|| {
        Bytes::from(a.clone());
    });
}

#[bench]
fn decode_unconnected_pong(b: &mut Bencher) {
    b.iter(|| {
        Bytes::from(vec![
            0x1c, 0xea, 0x5e, 0xca, 0x71, 0x02, 0x66, 0x66, 0x66, 0xab, 0x54, 0xa9, 0x8c, 0xeb, 0x1f,
            0x0a, 0xd2, 0x00, 0xff, 0xff, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0xfd, 0xfd, 0xfd, 0xfd, 0x12,
            0x34, 0x56, 0x78, 0x00, 0x2c, 0x4d, 0x43, 0x50, 0x45, 0x3b, 0x45, 0x61, 0x73, 0x65, 0x43,
            0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3b, 0x31, 0x34,
            0x30, 0x3b, 0x31, 0x2e, 0x32, 0x2e, 0x39, 0x3b, 0x31, 0x37, 0x36, 0x38, 0x39, 0x3b, 0x32,
            0x30, 0x30, 0x30, 0x30,
        ]).try_into_pk().unwrap();
    })
}