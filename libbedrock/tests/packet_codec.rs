extern crate bytes;
extern crate libbedrock;
use bytes::Bytes;
use libbedrock::packet::*;

#[cfg(test)]
fn test_encode_decode(a: Pk, b: std::vec::Vec<u8>) {
    let bytes = Bytes::from(a.clone()); // make the conversation graceful
    assert_eq!(bytes.to_vec(), b);
    let c = bytes.try_into_pk().unwrap();
    assert_eq!(c, a);
}

#[test]
fn test_unconnected_ping() {
    let a = Pk::UnconnectedPing {
        ping_time: 0xea5eca7102666666u64,
    };
    let b = vec![
        0x01, 0xea, 0x5e, 0xca, 0x71, 0x02, 0x66, 0x66, 0x66, 0x00, 0xff, 0xff, 0x00, 0xfe, 0xfe,
        0xfe, 0xfe, 0xfd, 0xfd, 0xfd, 0xfd, 0x12, 0x34, 0x56, 0x78,
    ];
    test_encode_decode(a, b);
}

#[test]
fn test_offline_connection_request_1() {
    let a = Pk::OfflineConnectionRequest1 {
        protocol_version: 7u8,
    };
    let b = vec![
        0x05, 0x00, 0xff, 0xff, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0xfd, 0xfd, 0xfd, 0xfd, 0x12, 0x34,
        0x56, 0x78, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
    ];
    test_encode_decode(a, b);
}

#[test]
fn test_offline_connection_response_1() {
    let a = Pk::OfflineConnectionResponse1 {
        server_id: 0x233666EA5ECA7102u64,
        mtu: 46,
    };
    let b = vec![
        0x06, 0x00, 0xff, 0xff, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0xfd, 0xfd, 0xfd, 0xfd, 0x12, 0x34,
        0x56, 0x78, 0x23, 0x36, 0x66, 0xEA, 0x5E, 0xCA, 0x71, 0x02, 0x00, 0x00, 0x2E,
    ];
    test_encode_decode(a, b);
}

#[test]
fn test_offline_connection_request_2() {
    let a = Pk::OfflineConnectionRequest2 {
        server_address: "192.168.0.233:19132".parse().unwrap(),
        mtu: 46,
        client_id: 0xECECECE237356812,
    };
    let b = vec![
        0x07, 0x00, 0xff, 0xff, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0xfd, 0xfd, 0xfd, 0xfd, 0x12, 0x34,
        0x56, 0x78, 0x04, 192, 168, 0, 233, 74, 188, 0x00, 0x2E, 0xEC, 0xEC, 0xEC, 0xE2, 0x37,
        0x35, 0x68, 0x12,
    ];
    test_encode_decode(a, b);
    let a = Pk::OfflineConnectionRequest2 {
        server_address: "[ecec::6666:2333]:19132".parse().unwrap(),
        mtu: 46,
        client_id: 0xECECECE237356812,
    };
    let b = vec![
        0x07, 0x00, 0xff, 0xff, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0xfd, 0xfd, 0xfd, 0xfd, 0x12, 0x34,
        0x56, 0x78, 0x06, 0xEC, 0xEC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x66, 0x66, 0x23, 0x33, 74, 188, 0x00, 0x2E, 0xEC, 0xEC, 0xEC, 0xE2, 0x37, 0x35, 0x68,
        0x12,
    ];
    test_encode_decode(a, b);
}

#[test]
fn test_offline_connection_response_2() {
    let a = Pk::OfflineConnectionResponse2 {
        server_id: 0x233666EA5ECA7102,
        client_address: "123.45.67.89:19132".parse().unwrap(),
        mtu: 0x1eaf,
    };
    let b = vec![
        0x08, 0x00, 0xff, 0xff, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0xfd, 0xfd, 0xfd, 0xfd, 0x12, 0x34,
        0x56, 0x78, 0x23, 0x36, 0x66, 0xEA, 0x5E, 0xCA, 0x71, 0x02, 0x04, 123, 45, 67, 89, 74, 188,
        0x1E, 0xAF, 0x00,
    ];
    test_encode_decode(a, b);
    let a = Pk::OfflineConnectionResponse2 {
        server_id: 0x233666EA5ECA7102,
        client_address: "[ecec::6666:2333]:19132".parse().unwrap(),
        mtu: 0x1eaf,
    };
    let b = vec![
        0x08, 0x00, 0xff, 0xff, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0xfd, 0xfd, 0xfd, 0xfd, 0x12, 0x34,
        0x56, 0x78, 0x23, 0x36, 0x66, 0xEA, 0x5E, 0xCA, 0x71, 0x02, 0x06, 0xEC, 0xEC, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x23, 0x33, 74, 188, 0x1E,
        0xAF, 0x00,
    ];
    test_encode_decode(a, b);
}

#[test]
fn test_unconnected_pong() {
    let a = Pk::UnconnectedPong {
        ping_time: 0xea5eca7102666666u64,
        server_id: 12345678901234567890u64,
        msg_of_today: String::from("EaseCation Server"),
        online_count: 17689,
        max_count: 20000,
        bedrock_net_ver: 140,
        bedrock_game_ver: String::from("1.2.9"),
    };
    let b = vec![
        0x1c, 0xea, 0x5e, 0xca, 0x71, 0x02, 0x66, 0x66, 0x66, 0xab, 0x54, 0xa9, 0x8c, 0xeb, 0x1f,
        0x0a, 0xd2, 0x00, 0xff, 0xff, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0xfd, 0xfd, 0xfd, 0xfd, 0x12,
        0x34, 0x56, 0x78, 0x00, 0x2c, 0x4d, 0x43, 0x50, 0x45, 0x3b, 0x45, 0x61, 0x73, 0x65, 0x43,
        0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3b, 0x31, 0x34,
        0x30, 0x3b, 0x31, 0x2e, 0x32, 0x2e, 0x39, 0x3b, 0x31, 0x37, 0x36, 0x38, 0x39, 0x3b, 0x32,
        0x30, 0x30, 0x30, 0x30,
    ];
    test_encode_decode(a, b);
}